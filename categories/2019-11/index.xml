<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019-11 on 渐行渐远</title>
    <link>/categories/2019-11/</link>
    <description>Recent content in 2019-11 on 渐行渐远</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/2019-11/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mongo中hint的使用</title>
      <link>/blog/2019/blog.016.mongo%E4%B8%ADhint%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/blog.016.mongo%E4%B8%ADhint%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>mongo官方文档对hint的解释如下：
 The $hint operator forces the query optimizer to use a specific index to fulfill the query. Specify the index either by the index name or by document.
 hint的命令行用法：
db.users.find().hint()  mongo中使用explain来确定查询使用的索引方案，对比explain的结果，可以反向校验hint的使用。explain的命令行用法:
db.collection.explain()  github.com/globalsign/mgo下对hint方法的注释如下：
// Hint will include an explicit &amp;quot;hint&amp;quot; in the query to force the server // to use a specified index, potentially improving performance in some // situations. The provided parameters are the fields that compose the // key of the index to be used.</description>
    </item>
    
    <item>
      <title>go.1.13中的Modules</title>
      <link>/blog/2019/blog.015-go.1.13%E4%B8%AD%E7%9A%84modules.2019.11.12/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/blog.015-go.1.13%E4%B8%AD%E7%9A%84modules.2019.11.12/</guid>
      <description>环境变量GOPRIVATE
GOPRIVATE升级到go.1.13不得不调整的一个变量。表示引用到的modules是私有的，无须从proxy下载，也无须校验包的checksum。
公司内部基本都有自己的git仓库，升级为go.1.13后，需要在GOPRIVATE中设置仓库的通配符地址。如果不设置该环境变量，go加载package时会从GOPROXY获取，而默认的GOPROXY无法找到指定的包。
参考官方提供的例子：
GOPRIVATE=*.corp.example.com,rsc.io/private  环境变量GOPROXY
go.1.13默认将GOPROXY设置为https://proxy.golang.org,direct，但执行go get会发现，这个地址是无法使用的。
从官方的提供的例子中，简单了解GOPROXY的规范：
// returns a list of all known versions of the given module, one per line. GET $GOPROXY/&amp;lt;module&amp;gt;/@v/list  当通过GOPROXY找不到具体的module时，会看到404或401的状态码
如果就是很烦躁，也可以不使用这个环境变量:
export GOPROXY=off  </description>
    </item>
    
    <item>
      <title>runtime中P的理解</title>
      <link>/blog/2019/blog.014-runtime%E4%B8%ADp%E7%9A%84%E7%90%86%E8%A7%A3.2019.11.11/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/blog.014-runtime%E4%B8%ADp%E7%9A%84%E7%90%86%E8%A7%A3.2019.11.11/</guid>
      <description>P是在Go1.1引入的概念，初始默认等于CPU核的数量。P只是一个逻辑概念，跟CPU也没有任何关系。
源码go/1.13.4/libexec/src/runtime/proc.go中对P的注释如下：
// P - processor, a resource that is required to execute Go code. // M must have an associated P to execute Go code, however it can be // blocked or in a syscall w/o an associated P.  再通过源码go/1.13.4/libexec/src/runtime/runtime2.go来简要了解一下P在调度过程中的状态变化：
const ( // P status _Pidle = iota _Prunning _Psyscall _Pgcstop // _Pdead means a P is no longer used (GOMAXPROCS shrank). We // reuse Ps if GOMAXPROCS increases.</description>
    </item>
    
  </channel>
</rss>