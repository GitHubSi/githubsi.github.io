<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019-06 on 道法自然</title>
    <link>/categories/2019-06/</link>
    <description>Recent content in 2019-06 on 道法自然</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/2019-06/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>里氏替换&amp;开放关闭</title>
      <link>/blog/2019/2019-06-06-%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%BC%80%E6%94%BE%E5%85%B3%E9%97%AD/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/2019-06-06-%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%BC%80%E6%94%BE%E5%85%B3%E9%97%AD/</guid>
      <description>里氏替换  Let Φ(x) be a property provable about objects x of type T. Then Φ(y) should be true for objects y of type S where S is a subtype of T
 本质上就是类设计中的继承，它强调类所实现的行为。参数的类型指定为基类，而实际传参的时候使用具体的子类。每次扩展新的行为，都通过创建一个新的子类来实现。在Go的设计中，继承是通过接口类型来实现的。
开放关闭  Software entities (classes, modules, function, etc) should be open for extension, but closed for modification.
A class is closed, since it may be complied, stored in a library, baselined and used by client classes.</description>
    </item>
    
    <item>
      <title>database package</title>
      <link>/blog/2019/19-06-03-database-package/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/19-06-03-database-package/</guid>
      <description>清除无效连接 在database库下清除过期连接时，使用了如下的代码逻辑。其中freeConn是空闲连接池，d是连接可被重复使用的最长时间，nowFunc返回的是当前时间。最新生成的连接在freeConn的末尾，而清除的过程则是使用最新的、次新的连接依次替换最早过期的、次早过期的连接。
在for循环中直接使用len来获取总计数，在循环体内部将freeConn末尾的值替换首部的值，并将freeConn的len长度减去1。最后还做了i—操作，重复校验了一次。
expiredSince := nowFunc().Add(-d) var closing []*driverConn for i := 0; i &amp;lt; len(db.freeConn); i++ { c := db.freeConn[i] if c.createdAt.Before(expiredSince) { closing = append(closing, c) last := len(db.freeConn) - 1 db.freeConn[i] = db.freeConn[last] db.freeConn[last] = nil db.freeConn = db.freeConn[:last] i-- } }  参考点 slice中首部和尾部数据的交换过程，以及每次通过i--达到的重复校验的思路。
间隔执行 清除无效连接的工作是由一个goroutine在后台完成的，下面是截取的部分代码。for循环内部是处理连接的具体实现。每次清除操作完成后，通过Reset来重置Timer。
func (db *DB) connectionCleaner(d time.Duration) { const minInterval = time.Second if d &amp;lt; minInterval { d = minInterval } t := time.</description>
    </item>
    
    <item>
      <title>mongo中ObjectId</title>
      <link>/blog/2019/2019-06-11-mongo%E4%B8%ADobjectid/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/2019-06-11-mongo%E4%B8%ADobjectid/</guid>
      <description>ObjectId在mongo中是自动生成的_id字段，充当数据表的主键ID。按照_id排序基本上等于按照记录的创建时间排序，但还是必须注意：_id并不是严格单调递增的，前4个byte的也只是精确到了秒级，同一秒内的_id并不能保证有序。
 ObjectIds are small, likely unique, faster to generate, and ordered. ObjectId values consist of 12 bytes, where the first four bytes are a timestamp that reflect the objectId&amp;rsquo;s creation. Specifically - a 4-byte value representing the seconds since the Unix epoch - a 5-byte random value - a 3 byte counter, starting with a random value
 排序 使用github.com/globalsign/mgo的翻页逻辑：
func (detail *CounterDetailMapper) GetDetailsByDesc(ctx context.IContext, objectId string, size int, startPoint string, data *[]models.</description>
    </item>
    
  </channel>
</rss>